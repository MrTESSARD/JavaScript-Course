// OBJETS EN JS
// Les objets en JS sont une collection de paires key-value. En JS TOUT ce qui n'est pas une primitive.

// D√©claration litt√©rale
const person = {
    firstName:'John',
    lastName:'Doe'
};

// D√©claration via constructor
const chien = new Object();

// D√©claration statique
const chat = Object.create({});

// get = object.property;//Permet d'acc√©der √† la valeur d'une propri√©t√© d'un object
// object.property = set;//Permet de d√©finir la valeur d'une propri√©t√© d'un objet

// M√©thodes pour afficher un objet
console.log(person);
console.log(person[0]);
console.log(person.lastName);
// On peut aussi utiliser la notation ["property"] pour y acc√©der mais ce n'est pas pratique
console.log(person["firstName"]);


let hello;
let world;

// Ancienne m√©thode d'initialisation d'objets
const oldObj = {
    hello:hello,
    world:world,
};


// Nouvelle m√©thode d'initialisation d'objets
const experience = "exp";

const newObj = {
    hello,
    world,
    [experience]:23,
};

console.log(newObj);
//Supprimer une propri√©t√© d'un objet
delete newObj.exp;

console.log(newObj);

// Comparaison, r√©f√©rence et identit√© d'un objet
const origin = {
    hello:'world',
};

// Des variables assign√©es √† un objet sont des r√©f√©rences √† celui-ci
const x = origin;
const y = origin;

// Par cons√©quent ils ne sont pas √©gaux √† un nouvel objet mais plut√¥t au premier objet duquel ils font r√©f√©rence.
console.log(x === y);
console.log(x === origin);
console.log(x === {hello: 'world'});


// En modifiant la propri√©t√© d'un objet via une variable qui le r√©f√©rence, on modifie aussi cette valeur chez l'objet et les autres r√©f√©rences.
x.hello = 'hello';

console.log(x);
console.log(y);
console.log(origin);

// On peut cloner un objet en utilisant la m√©thode de d√©claration statique et en passant en second argument l'objet depuis lequel on doit cloner les propri√©t√©s.

const clone = Object.assign({},origin);

// Une fois clon√©, le nouvelle objet n'est plus une r√©f√©rence mais toutes ses propri√©t√©s et ses valeurs seront identiques.
console.log(clone === origin);

// Ici contrairement aux variables qui r√©f√©rencent l'objet origin, on peut modifier l'objet clon√© sans affecter l'objet origin
clone.hello = "world";

console.log(origin.hello);
console.log(clone.hello);

// Syntaxe ES6 avec le spread operator ou op√©rateur de d√©composition
const jumeau = {...origin,
    bonjour: 'bonjour',
    // D√©claration d'une m√©thode de l'objet, c'est √† dire une fonction propre √† l'objet. Cette m√©thode ne peut √™tre lanc√©e qu'en r√©f√©rence √† l'objet qui poss√®de cette m√©thode. Son scope est consid√©r√© comme local donc toutes les variables √† l'int√©rieur seront locales et il ne pourra pas √™tre appel√© de lui-m√™me sans l'objet. Plusieurs objets diff√©rents pourront avoir la m√©thode qui a le m√™me nom puisque son scope est local (C'est toutefois une mauvaise pratique, √† moins que cetlle-ci ne fasse la m√™me chose ref : Ninja Code)
    salut(){
        console.log('Salut √† toi jeune entrepreneur');
    }
};

console.log(jumeau);

jumeau.salut();


const dev = {
    firstName:'Axel',
    metier :'D√©veloppeur',
    // Ici on d√©clare une m√©thode du m√™me nom que la m√©thode d'avant, mais cette fois-ci elle r√©cup√®re une propri√©t√© par le biais d'un ${this}
    salut(){
        console.log(`Salut √† toi jeune ${this.metier}`);
    }
}
console.log(dev);
dev.salut();

// Ici on cr√©e un objet game, sur lequel on voudra faire du cha√Ænage de m√©thode
const game = {
    hp :100,
    log(){
        console.log(`üíô${this.hp}`);
    },
    damage(){
        this.hp-=10;
        this.log();
        // CE RETURN THIS EST IMPERATIF POUR LE CHAINAGE, SANS CELUI-CI CELA REVIENDRAIT A DEMANDER L'EXECUTION DE LA FONCTION DAMAGE() A L'INTERIEUR DELA FONCTION DAMAGE(), OR IL N'Y EN A PAS
        return this;
    },
    heal(){
        this.hp+=10;
        this.log();
        return this;
    }
}

// Cha√Ænage de m√©thode avec l'appel successif aux m√©thodes
game.damage().damage().damage().heal();


// On utilise une fonction constructor qui va d√©crire la fa√ßon de cr√©er un objet par cette fonction.
// Les objets cr√©es avec cette fonction auront les m√™me propri√©t√©s de base, mais aussi les m√™me m√©thodes.
function Personnage(name){
    this.name = name;
    // Utilisation d'un objet Date pour afficher la date
    this.created = new Date();
    this.birthday = function(){
        // Formatage de l'objet Date avec toDateString pour afficher la date sous forme de cha√Æne de caract√®res.
        console.log(this.created.toDateString());
    };

    this.sePresenter = function(){
        console.log(this.name);
    }
}

// On cr√©e un objet avec la syntaxe new puis le nom de la fonction constructor.

const mario = new Personnage("Mario");

//Ici le nouveau Personnage poss√®de les m√™mes propri√©t√©s que celle d√©finies au d√©part dans la fonction constructor
console.log(mario);
mario.sePresenter();
mario.birthday();